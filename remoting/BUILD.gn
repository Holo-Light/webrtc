# Build script for remoting, because updating 2 submodules when adding a file
# to the build is ridiculous.
# Author: Krzysztof Lesiak (k.lesiak@holo-light.com)

import("../webrtc.gni")

if (is_android) {
  import("//build/config/android/config.gni")
  import("//build/config/android/rules.gni")
} else if (is_mac) {
  import("//build/config/mac/rules.gni")
} else if (is_ios) {
  import("//build/config/ios/rules.gni")
}

group("remoting_all") {
  deps = [
    ":remoting"
  ]
}

  rtc_source_set("remoting_static") {
    sources = [
      # original plugin code / TODO MARKUS: Get rid of this once our implementation doesn't need the reference anymore
      "simple_peer_connection.cc",
      "simple_peer_connection.h",
      "unity_plugin_apis.cc",
      "unity_plugin_apis.h",
      # our plugin code
      "video_observer.cc",
      "video_observer.h",
      #"connection.h",
      #"connection.cc",
      #"config.h",
      #"config.cc",
      "error.h",
      "sdp_observers.h",
      "tl/expected.hpp",
      # this could become a separate target at some point
      "signaling/factories/signaling_factory.h",
      "signaling/factories/signaling_factory.cc",
      "signaling/impl/json_serializer.h",
      "signaling/impl/json_serializer.cc",
      "signaling/impl/uwp_tcp_relay.h",
      "signaling/impl/uwp_tcp_relay.cc",
      "signaling/serializer.h",
      "signaling/signaling_relay.h",
      "signaling/webrtc/webrtc_signaling_relay.h",
      "signaling/webrtc/webrtc_signaling_relay.cc",
      "util/string_utils.h",
      "util/future_utils.h",
      "remoting/factories/client_to_server_connection_factory.h",
      "remoting/factories/client_to_server_connection_factory.cpp",
      "remoting/factories/connection_factory_base.h",
      "remoting/factories/connection_factory_base.cpp",
      "remoting/factories/server_to_client_connection_factory.h",
      "remoting/factories/server_to_client_connection_factory.cpp",
      "remoting/video/video_frame_buffer.h",
      "remoting/video/video_frame_buffer.cpp",
      "remoting/video/video_frame.h",
      "remoting/video/video_frame.cpp",
      "remoting/client_to_server_connection.h",
      "remoting/client_to_server_connection.cpp",
      "remoting/server_to_client_connection.h",
      "remoting/server_to_client_connection.cpp",
      # public api
      "remoting_api.h",
      "remoting_api.cc",
    ]

    if (is_android) {
      sources += [
        "classreferenceholder.cc",
        "classreferenceholder.h",
        "jni_onload.cc",
      ]
      suppressed_configs += [ "//build/config/android:hide_all_but_jni_onload" ]
    }

    if (!build_with_chromium && is_clang) {
      # Suppress warnings from the Chromium Clang plugin (bugs.webrtc.org/163).
      suppressed_configs += [ "//build/config/clang:find_bad_constructs" ]
    }

    deps = [
      "../api:libjingle_peerconnection_api",
      "../api/audio_codecs:builtin_audio_decoder_factory",
      "../api/audio_codecs:builtin_audio_encoder_factory",
      "../api/video:video_frame",
      "../media:rtc_audio_video",
      "../media:rtc_internal_video_codecs",
      "../media:rtc_media",
      "../media:rtc_media_base",
      "../modules/audio_device:audio_device",
      "../modules/audio_processing:audio_processing",
      "../modules/video_capture:video_capture_module",
      "../pc:libjingle_peerconnection",
      "../rtc_base:rtc_base",
      "../system_wrappers:field_trial_default",
      "../system_wrappers:metrics_default",
      "../system_wrappers:runtime_enabled_features_default",
      "//third_party/abseil-cpp/absl/memory",
      "//third_party/jsoncpp",
    ]

    if (is_win) {
      # exceptions are used in cppwinrt lib, warning as error doesn't let us build, so here goes...
      # actually we only use com_ptr I think, so we could use WRL too in that case and don't need c++17
      cflags = [ "/std:c++17", "/EHsc" ]
      configs += [ "//build/config/win:windowed" ]
      deps += [ "//third_party/winuwp_h264" ]
      
      # so the win32 build works aswell
      libs = [ "WindowsApp.lib" ]
    }

    if (is_android) {
      deps += [
        "../modules/utility:utility",
        "../sdk/android:libjingle_peerconnection_jni",
      ]
    }
  }

  rtc_shared_library("remoting") {
    deps = [ ":remoting_static" ]
  }

  if (rtc_include_tests) {
    rtc_test("remoting_tests") {
        testonly = true
        # test code needs to access real code which is c++17. well, fuck.
        cflags = [ "/std:c++17", "/EHsc" ]
        sources = [
          "test/connection_unittest.cc",
        ]
        deps = [
          # tests don't like dlls, so we link the static one
          ":remoting_static",
          "//rtc_base:rtc_base_tests_main", #this one provides the main method for tests to run, otherwise the compiler cries
          "//testing/gmock",
          "//testing/gtest",
        ]
    }
  }
  